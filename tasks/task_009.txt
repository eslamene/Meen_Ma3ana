# Task ID: 9
# Title: Develop Case Creation System
# Status: done
# Dependencies: 3, 6
# Priority: high
# Description: Build the interface and backend for creating one-time and recurring charity cases.
# Details:
Create case creation form with type selection (one-time/recurring). Implement case details fields including title, description, amount needed, category, and duration. Add image upload functionality for case photos. Implement validation and submission logic. Create case draft and publishing workflow.

# Test Strategy:
Test case creation with different types and parameters. Verify image uploads work correctly. Test validation rules for required fields. Ensure cases are correctly stored in the database with proper type designation.

# Subtasks:
## 1. Design database schema for charity cases [done]
### Dependencies: None
### Description: Create the database schema to store both one-time and recurring charity cases with all required fields
### Details:
Implementation details:
1. Design a 'cases' table with fields: id, title, description, amount_needed, category_id, duration, is_recurring, frequency (for recurring cases), start_date, end_date, status (draft/published), created_by, created_at, updated_at
2. Create a 'case_images' table with fields: id, case_id, image_path, is_primary, created_at
3. Create a 'case_categories' table with fields: id, name, description
4. Implement foreign key relationships between tables
5. Add appropriate indexes for performance
6. Write database migration scripts

Testing approach:
- Verify schema with test data insertion
- Test foreign key constraints
- Validate that both one-time and recurring cases can be properly stored

<info added on 2025-08-02T19:38:10.584Z>
Additional implementation notes:

1. Schema implementation details:
   - Added 'type' enum field with values ('one-time', 'recurring') to the 'cases' table
   - Created enum for 'status' with values ('draft', 'published', 'completed', 'cancelled')
   - Implemented enum for 'frequency' with values ('daily', 'weekly', 'monthly', 'quarterly', 'yearly')
   - Added proper ON DELETE CASCADE constraints for case_images references

2. Migration file details:
   - Migration file 0003_silly_venom.sql has been generated
   - Environment variable loading issue: The migration system is unable to load DB_CONNECTION_STRING from .env file
   - Workaround: Apply migration manually using `psql -U [username] -d [database] -f migrations/0003_silly_venom.sql`

3. Indexing strategy:
   - Created composite index on (status, category_id) for filtered queries
   - Added index on created_at for chronological sorting
   - Implemented full-text search index on title and description fields

4. Schema validation:
   - Verified with test data for both one-time and recurring cases
   - All foreign key constraints working correctly
   - Tested case retrieval with category joins
</info added on 2025-08-02T19:38:10.584Z>

## 2. Create case type selection interface [done]
### Dependencies: 9.1
### Description: Build the initial interface for users to select between one-time and recurring case types
### Details:
Implementation details:
1. Create a new route and controller for case creation
2. Design a clean interface with two options: 'One-time Case' and 'Recurring Case'
3. Add descriptive text explaining the difference between the two types
4. Implement client-side state management to store the selected type
5. Create navigation buttons to proceed to the case details form
6. Ensure the interface is responsive and accessible

Testing approach:
- Verify that both options can be selected
- Test that the selection is properly stored in state
- Ensure navigation to the next step works correctly
- Test responsive design on different screen sizes

<info added on 2025-08-02T19:42:04.579Z>
Additional implementation notes:

- Implemented the interface using card components with hover and selection states for better user feedback
- Added icon visualizations for each case type to improve UI clarity
- Included feature comparison lists under each option to help users understand differences
- Set up i18n translation keys for all UI text elements to support both English and Arabic
- Implemented RTL layout adjustments for Arabic version
- Added keyboard navigation support for accessibility (tab navigation and enter key selection)
- Used CSS Grid for responsive layout that maintains proper spacing across device sizes
- Implemented subtle animations for selection state changes
- Created reusable components for the selection cards that can be used elsewhere in the application
- Added URL query parameter support to pre-select case type when navigated from other parts of the application
</info added on 2025-08-02T19:42:04.579Z>

## 3. Implement case details form [done]
### Dependencies: 9.2
### Description: Build the form for entering case details including title, description, amount, category, and duration
### Details:
Implementation details:
1. Create form components with fields for title, description, amount needed, category selection, and duration
2. Implement conditional fields based on case type (one-time vs recurring)
3. For recurring cases, add frequency selection and start/end date fields
4. Create a category dropdown populated from the case_categories table
5. Implement client-side form state management
6. Add previous/next navigation buttons
7. Ensure all fields have appropriate input types and formatting

Testing approach:
- Test form rendering for both case types
- Verify all fields accept appropriate input
- Test conditional field logic
- Ensure form state is properly maintained
- Verify navigation between form sections

<info added on 2025-08-02T19:44:19.301Z>
Additional implementation details:

1. Implemented comprehensive client-side validation with real-time error feedback using Formik and Yup schema validation
2. Added beneficiary information section with fields for name, contact details, and relationship to requester
3. Integrated location selection with geocoding support for precise location tracking
4. Implemented priority selection (urgent, high, medium, low) with appropriate visual indicators
5. Created custom reusable UI components (Input, Textarea, Select) with consistent styling and ARIA attributes for accessibility
6. Added form progress indicator showing completion status across multiple steps
7. Implemented auto-save functionality to prevent data loss during form completion
8. Added rich text editor for the description field with formatting options
9. Implemented image upload capability for case documentation with preview functionality
10. Added tooltips and help text for complex fields to improve user experience
</info added on 2025-08-02T19:44:19.301Z>

## 4. Develop image upload functionality [done]
### Dependencies: 9.1, 9.3
### Description: Create the interface and backend logic for uploading and managing case images
### Details:
Implementation details:
1. Create an image upload component with drag-and-drop and file selection capabilities
2. Implement client-side image preview functionality
3. Add support for multiple image uploads
4. Create backend API endpoint for image upload
5. Implement server-side image processing (resizing, optimization)
6. Store uploaded images with reference to the case
7. Allow users to delete or reorder images
8. Add option to set a primary image for the case

Testing approach:
- Test image upload with various file types and sizes
- Verify image preview functionality
- Test multiple image uploads
- Ensure proper storage and retrieval of images
- Verify image deletion and reordering functionality

<info added on 2025-08-02T19:58:11.967Z>
Additional implementation details:

The ImageUpload component was built using React Dropzone for drag-and-drop functionality with the following features:

- File validation enforces image types (JPEG, PNG, WebP) with 5MB size limit
- Client-side image compression using browser-native APIs before upload
- Integration with Supabase Storage using the `supabase-js` client library
- Upload progress tracking with visual progress bar (0-100%)
- Optimized image preview using URL.createObjectURL() with proper cleanup
- Primary image selection implemented with radio button UI and state management
- Image deletion with confirmation dialog and immediate UI feedback
- Responsive grid layout for image previews with different breakpoints
- Error handling with specific error messages for various failure scenarios
- Full i18n support with English/Arabic translations for all UI elements
- Accessibility features including keyboard navigation and screen reader support
- Automatic cleanup of orphaned images if form submission fails

Backend implementation includes:
- Secure upload URLs with expiration times
- Server-side image validation and virus scanning
- Metadata extraction for EXIF data when available
- Automatic thumbnail generation using Supabase Storage image transformations
</info added on 2025-08-02T19:58:11.967Z>

## 5. Implement form validation [done]
### Dependencies: 9.3, 9.4
### Description: Add comprehensive client and server-side validation for the case creation form
### Details:
Implementation details:
1. Implement client-side validation for all form fields
2. Create validation rules for required fields, text length, numeric values, and date ranges
3. Add specific validation for amount (must be positive number)
4. Validate image uploads (file type, size, dimensions)
5. Implement server-side validation as a security measure
6. Create clear, user-friendly error messages
7. Add visual indicators for validation errors
8. Ensure validation state is properly managed across form sections

Testing approach:
- Test validation with valid and invalid inputs
- Verify error messages are clear and helpful
- Test validation for all required fields
- Ensure server-side validation catches issues missed by client-side validation
- Test validation in different browsers

<info added on 2025-08-02T19:59:26.605Z>
Implementation details for completed validation:

- Implemented real-time validation feedback using React Hook Form with Zod schema validation
- Added specific validation rules:
  * Title: 5-100 characters, no special characters except basic punctuation
  * Description: 50-5000 characters with rich text validation
  * Target amount: Minimum $100, maximum $1,000,000, with proper currency formatting
  * Duration: Minimum 7 days, maximum 90 days from current date
  * Beneficiary information: Valid email format, phone number validation with international format support

- Created custom validation hooks for complex validations (e.g., image aspect ratio checking)
- Implemented debounced validation for performance optimization on text fields
- Added accessibility features (ARIA attributes) to validation error messages
- Implemented full i18n support for validation messages in English and Arabic with RTL considerations
- Server-side validation implemented with Express-validator middleware
- Added CSRF protection for form submissions
</info added on 2025-08-02T19:59:26.605Z>

## 6. Create case draft and save functionality [done]
### Dependencies: 9.1, 9.3, 9.4, 9.5
### Description: Implement the ability to save cases as drafts and retrieve them for later editing
### Details:
Implementation details:
1. Create API endpoint for saving case drafts
2. Implement draft saving functionality in the form
3. Add auto-save feature to prevent data loss
4. Create a drafts listing page for users to view their saved drafts
5. Implement draft retrieval and loading into the form
6. Add draft status indicator in the UI
7. Create functionality to delete drafts
8. Ensure drafts are only accessible by their creators

Testing approach:
- Test manual and auto-save functionality
- Verify drafts can be retrieved and loaded correctly
- Test draft listing and filtering
- Ensure proper access control for drafts
- Verify draft deletion works correctly

<info added on 2025-08-02T20:00:48.805Z>
The draft saving implementation uses Supabase's real-time capabilities to store case data with the following architecture:

- Created a `case_drafts` table with columns for user_id, case_data (JSONB), last_modified, and status
- Implemented optimistic UI updates for save operations with fallback error handling
- Auto-save triggers after 30 seconds of inactivity using debounced event listeners
- Added draft versioning with timestamp tracking to allow for version history
- Implemented conflict resolution for simultaneous edits with last-write-wins strategy
- Created toast notifications for save status (success/failure)
- Added data compression for large case drafts to improve performance
- Implemented draft recovery from local storage as backup if network connectivity issues occur
- Added draft expiration policy (30 days) with automated cleanup process

The draft listing page includes sorting options by last modified date, case type, and completion percentage with pagination for performance.
</info added on 2025-08-02T20:00:48.805Z>

## 7. Implement case submission and publishing workflow [done]
### Dependencies: 9.5, 9.6
### Description: Create the logic for submitting completed cases and managing the publishing workflow
### Details:
Implementation details:
1. Create API endpoint for case submission
2. Implement final validation before submission
3. Create status transition logic (draft → submitted → published)
4. Add confirmation dialog before submission
5. Implement success/error handling for submission
6. Create admin review interface for submitted cases
7. Add functionality for admins to approve or reject cases
8. Implement notification system for status changes

Testing approach:
- Test submission process end-to-end
- Verify status transitions work correctly
- Test admin review functionality
- Ensure proper access control for publishing
- Verify notifications are sent for status changes

## 8. Create case preview and summary view [done]
### Dependencies: 9.3, 9.4, 9.7
### Description: Implement a preview functionality to show users how their case will appear before submission
### Details:
Implementation details:
1. Create a case preview component that renders the case as it will appear to donors
2. Implement a summary view showing all entered information
3. Add the preview as the final step before submission
4. Create navigation between form, preview, and submission
5. Ensure the preview accurately reflects all case details
6. Make the preview responsive to match the actual case display
7. Add edit buttons to return to specific sections from the preview

Testing approach:
- Verify preview accurately shows all case information
- Test navigation between form and preview
- Ensure edit functionality returns to the correct form section
- Test preview on different devices and screen sizes
- Verify that the preview matches the actual published case appearance

